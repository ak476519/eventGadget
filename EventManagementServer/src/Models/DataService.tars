module EventGadget {
    struct UserInfo
    {
        0 require string name;
        1 require string phone;
        2 require string gender;
        3 require string avatar_url;
        4 require string registration_time;
    };
    
    struct Column
    {
        0 require string columnName;
        1 require bool   DBInt;
        2 require string columnValue;
    };

    struct PlanetInfo
    {
        0 require string planet_id;
        1 require string name;
        2 require string population;
        3 require string create_time;
        4 require string introduction;
    };

    struct EventInfo
    {
        0  require  string event_id;
        1  optional string name;
        2  require  string planet_id;
        3  require  string location;
        4  optional string create_time;
        5  optional string start_time;
        6  optional string stop_time;
        7  optional string content;
    };

    struct ProposalInfo
    {
        0  require  string proposal_id;
        1  require  string wx_id;
        2  require  string location;
        3  require  string radius;
        4  require  string planet_id;
        5  optional string create_time;
        6  optional string start_time;
        7  optional string stop_time;
        8  optional string content;
    };

    struct EventRecord
    {
        0 require string wx_id;
        1 require string user_name;
        2 require string record_time;
    };

    interface DataService
    {
        int hasUser(string wx_id, out bool userExist);
        int hasPhone(string phone, out bool phoneExist);
        int createUser(string wx_id, UserInfo userInfo);
        int getUserInfo(string wx_id, out UserInfo userInfo);

        int getPlanetList(int index, int batch, string wx_id, out int nextIndex, out vector<PlanetInfo> planetInfoList);
        
        int createProposal(ProposalInfo proposalInfo);
        int getProposalList(int index, int batch, string wx_id, string planet_id, out int nextIndex, out vector<map<string, string>> proposalList);
        int updateProposal(ProposalInfo proposalInfo, out int iRetCode);
        int deleteProposal(string proposal_id, out int iRetCode);
        int getProposalInfo(string proposal_id, out ProposalInfo proposalInfo);

        int createEventRecord(string wx_id, string event_id);
        int getEventRecords(int index, int batch, string event_id, out int nextIndex, out vector<EventRecord> recordList);
        int deleteEventRecord(string event_id, string wx_id, out int iRetCode);

        int insertData(string sTableName, vector<Column> sColumns);
        int queryData(string sTableName, vector<string> sColumns, string sCondition, out vector<map<string, string>> sRsp);
        int getRecordCount(string sTableName, string sCondition, out int iCount);
    };
};